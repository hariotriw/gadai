package com.nds.gadai.validators;

import java.math.BigDecimal;

import com.nds.gadai.exceptions.ClientException;
import com.nds.gadai.globals.GlobalConstant;
import com.nds.gadai.models.ProductModel;

public class ProductValidator {

    public void nullCheckId(String id) throws ClientException {
        if (id == null) {
            throw new ClientException("Product id is required");
        }
    }

    public void notNullCheckId(String id) throws ClientException {
        if (id != null) {
            throw new ClientException("Product id is autogenerated, do not input id");
        }
    }

    public void nullCheckSavingServicePercent(BigDecimal savingService) throws ClientException {
        if (savingService == null) {
            throw new ClientException("ltv is required");
        }
    }

    public void nullCheckObject(Object o) throws ClientException {
        if (o == null) {
            throw new ClientException("Product not found");
        }
    }

    public void validateAdminOpeningCost(ProductModel productModel) throws ClientException {
        if ((productModel.getAdminOpeningType() == "0") && ((productModel.getAdminOpeningCost().doubleValue() > 100) ||
            (productModel.getAdminOpeningCost().doubleValue() < 0))){
            throw new ClientException("If admin payment type is percent, value must between 0 - 100");
        }
    }

    public void validateAdminClosingCost(ProductModel productModel) throws ClientException {
        if ((productModel.getAdminClosingType() == "0") && ((productModel.getAdminClosingCost().doubleValue() > 100) ||
            (productModel.getAdminClosingCost().doubleValue() < 0))){
            throw new ClientException("If admin payment type is percent, value must between 0 - 100");
        }
    }

    public void validateSavingServiceNumeric(ProductModel productModel) throws ClientException {
        if ((productModel.getSavingServiceNumeric().intValue() > productModel.getTenor()) ||
        (productModel.getTenor() % productModel.getSavingServiceNumeric().intValue() != 0)){
            throw new ClientException("Saving Service period must be lower than tenor and must be a factor of tenor");
        }
    }

    public void validateRecStatus(String id, String recStatus) throws ClientException {
        if (recStatus.equalsIgnoreCase(GlobalConstant.REC_STATUS_NON_ACTIVE)) {
            throw new ClientException("Product with id - " + id + " has already been deleted");
        }
    }
    
}
